#include<conio.h>
#include<iostream>
#include<string>
#include<fstream>
#include<vector>
using namespace std;
struct treenode
{
	string word;
	treenode* parent;
	vector <treenode*> branch;
	bool hasChecked;
};
struct llnode
{
	string word;
	llnode* next;
};
bool isOneOff(treenode*, llnode*, string);
bool isRepeat(treenode*, string);
treenode* nextThing(treenode*);
treenode* findWord(treenode*, string);
void main()
{
	string first = "", last = " ";
	while (first.length() != last.length())
	{
		cout << "Enter the starting word" << endl;
		cin >> last;
		cout << "Enter the ending word of same length of the starting word" << endl;
		cin >> first;
	}
	for (int count = 0; count < first.length(); count++)
	{
		first[count] = tolower(first[count]);
		last[count] = tolower(last[count]);
	}
	//create and populate list of possible through-words
	char ministo;
	string sto = "";
	ifstream in;
	llnode *lfirst, *lnew, *llast;
	in.open("dictfile.txt");
	lnew = new llnode;
	lnew->next = NULL;
	lfirst = lnew;
	llast = lnew;
	while (!in.eof())
	{
		ministo = in.get();
		if ((ministo >= 65 && ministo <= 90) || (ministo >= 97 && ministo <= 122))
			sto += tolower(ministo);
		else if (ministo == '\n'&&sto.length() > 0)
		{
			if (sto.length() == first.length())
			{
				llast->word = sto;
				lnew = new llnode;
				lnew->next = NULL;
				llast->next = lnew;
				llast = lnew;
			}
			sto = "";
		}
	}
	if (sto.length() == first.length())
	{
		llast->word = sto;
		lnew = new llnode;
		lnew->next = NULL;
		llast->next = lnew;
		llast = lnew;
	}
	llast->word = first;
	in.close();
	//parse ll for starting word
	llnode *lread;
	lread = lfirst;
	while (lread->next != NULL)
	{
		if (lread->word == last)
			lread->word = "word";
		lread = lread->next;
	}
	if (lread->word == last)
		lread->word = "word";
	cout << "List of words constructed!  Starting on tree..." << endl;
	//construct tree using list until last is placed
	treenode *troot, *twork;
	twork = new treenode;
	twork->hasChecked = false;
	twork->parent = NULL;
	troot = twork;
	twork->word = first;
	while (true)	//broken out of when finished
	{
		lread = lfirst;
		if(isOneOff(twork, lread, last))
			break;
		twork->hasChecked = true;
		twork = nextThing(twork);
		if (twork == NULL)
			break;
	}
	//read through tree and find one that works
	cout << "Looking for the right path..."<<endl;
	twork=findWord(troot, last);
	if (twork == NULL)
		cout << "Sorry, but there is no path from " << last << " to " << first << endl;
	else
	{
		cout << "---" << endl;
		while (twork->parent != NULL)
		{
			cout << twork->word << endl;
			twork = twork->parent;
		}
		cout << twork->word << endl;
	}
	_getch();
}
bool isOneOff(treenode* twork, llnode* lread, string last)
{
	treenode *tnew;
	while (lread->next != NULL)
	{
		int lilflag = 0;
		for (int count = 0; count < lread->word.length(); count++)
		{
			if (twork->word[count] != lread->word[count])
				lilflag++;
		}
		if (lilflag == 1)
		{
			if (lread->word == last)
				return true;
			if (isRepeat(twork, lread->word) == false)
			{
				tnew = new treenode;
				tnew->hasChecked = false;
				tnew->word = lread->word;
				twork->branch.push_back(tnew);
				tnew->parent = twork;
			}
		}
		lread = lread->next;
	}
	int lilflag = 0;
	for (int count = 0; count < lread->word.length(); count++)
	{
		if (twork->word[count] != lread->word[count])
			lilflag++;
	}
	if (lilflag == 1)
	{
		if (isRepeat(twork, lread->word) == false)
		{
			tnew = new treenode;
			tnew->hasChecked = false;
			tnew->word = lread->word;
			twork->branch.push_back(tnew);
			tnew->parent = twork;
		}
	}
	return false;
}
bool isRepeat(treenode*twork, string checkthing)
{
	while (twork->parent != NULL)
	{
		if (twork->word == checkthing)
			return true;
		twork = twork->parent;
	}
	if (twork->word == checkthing)
		return true;
	else return false;
}
treenode* nextThing(treenode* twork)
{
	for (int count = 0; count < twork->branch.size(); count++)
	{
		if (twork->branch[count]->hasChecked == false)
			return twork->branch[count];
	}
	if (twork->parent != NULL)
		return nextThing(twork->parent);
	else return NULL;
}
treenode* findWord(treenode* twork, string lookinfor)
{
	treenode* stodo;
	if (twork->word == lookinfor)
		return twork;
	else if(twork->branch.size()>0)
	{
		for (int count = 0; count < twork->branch.size(); count++)
		{
			stodo=findWord(twork->branch[count], lookinfor);
			if(stodo!=NULL)
				if (stodo->word == lookinfor)
					return stodo;
		}
	}
	return NULL;
}
