#include<conio.h>
#include<iostream>
#include<string>
#include<fstream>
using namespace std;	
struct node {
	string arr;
	node* next;
};
void main()
{
	node *firstest, *lastest, *newest=new node;
	firstest = lastest = newest;
	firstest->next = NULL;
	char ministorage;
	string storage;
	ifstream in;
	ofstream out;
	in.open("alphabefilell.txt");
	while (!in.eof())			//enter file into linked list, parse for non-letter characters
	{
		ministorage = in.get();
		if ((ministorage >= 65 && ministorage <= 90) || (ministorage >= 97 && ministorage <= 122))
			storage += ministorage;
		else if(storage.length()>0)
		{
			lastest->arr = storage;
			newest = new node;
			lastest->next = newest;
			lastest = newest;
			lastest->next = NULL;
			storage = "";
		}
	}
	
	if (storage != "")
	{
		lastest->arr = storage;
		newest = new node;
		lastest->next = newest;
		lastest = newest;
		lastest->next = NULL;
	}
	in.close();
	//alphabetize file using bubble sort
	node *search;
	bool thingus = true;
	while (thingus == true)
	{
		search = firstest;
		thingus = false;
		while (search->next != NULL)
		{
			if (search->next->arr.compare(search->arr) < 0)
			{
				thingus = true;
				storage = search->arr;
				search->arr = search->next->arr;
				search->next->arr = storage;
			}
			search = search->next;
		}
	}
	//print contents of linked list to a file
	search = firstest->next;
	out.open("alphabetedll.txt");
	out << firstest->arr << endl;
	storage = firstest->arr;
	while (search->next != NULL)
	{
		if(search->arr!=storage)
			out << search->arr << endl;
		storage = search->arr;
		search = search->next;
	}
	if(storage!=lastest->arr)
		out << lastest->arr << endl;
	out.close();
}
