//header
#ifndef _FRACTIONS_
#define _FRACTIONS_

class Fractions{
public:
	//Constructor
	Fractions();
	Fractions(int, int);
	Fractions(string);
	//calculate
	Fractions reduce(void);
 	Fractions multFrac(Fractions);
 	Fractions divideFrac(Fractions);
	void mixedFrac(Fractions);
 	Fractions addFrac(Fractions);
 	Fractions subtractFrac(Fractions);
 	bool equalFrac(Fractions);
 	bool isLessThanFrac(Fractions);
 	bool isGreaterThanFrac(Fractions);
	//accessors
 	string showFrac();
	void setFrac(string);
	void setNum(int);
 	void setDenom(int);
 	int showDenom();
 	int showNum();
	Fractions copyFrac(Fractions);
	void clearFrac();

private:
	int fractDenom;
	int fractNum;
	int wholePart;
};

Fractions operator*(Fractions , Fractions );
Fractions operator/(Fractions , Fractions );
Fractions operator+(Fractions , Fractions );
Fractions operator-(Fractions , Fractions );
bool operator<(Fractions, Fractions);
bool operator<=(Fractions, Fractions);
bool operator>(Fractions, Fractions);
bool operator>=(Fractions, Fractions);
ostream& operator<<(ostream& , Fractions& );
#endif 
//resource
#include "Fractions.h"
//Constructor
Fractions::Fractions(){}
Fractions::Fractions(int num, int denum)
{
	fractNum=num;
	fractDenom=denum;
}
Fractions::Fractions(string frat)
{
	//format is <mixed&>num/denom
	string flag="";

	for(int count=0; count<frat.length(); count++)
	{
		if(frat[count]=='/')
			flag+='/';
		else if(frat[count]=='&')
			flag+='&';
	}
	if(flag=="/")
	{

	}
	else if(flag=="&/")
	{
		
	}
	else
		cout<<"Invalid input";
}
Fractions Fractions::reduce(void)
{
	int biggest;
	if(fractNum<fractDenom)
		biggest=fractDenom;
	else
		biggest=fractNum;
	for(int reduce=2; reduce<biggest; reduce++)
		if(fractNum%reduce==0 && fractDenom%reduce==0)
		{
			fractNum/=reduce;
			fractDenom/=reduce;
		}
}
Fractions Fractions::multFrac(Fractions)
{
	
}
Fractions Fractions::divideFrac(Fractions)
{

}
void Fractions::mixedFrac(Fractions)
{

}
Fractions Fractions::addFrac(Fractions)
{

}
Fractions Fractions::subtractFrac(Fractions)
{

}
bool Fractions::equalFrac(Fractions)
{

}
bool Fractions::isLessThanFrac(Fractions)
{

}
bool Fractions::isGreaterThanFrac(Fractions)
{

}
//accessors
string Fractions::showFrac()
{

}
void Fractions::setFrac(string)
{

}
void Fractions::setNum(int)
{

}
void Fractions::setDenom(int)
{

}
int Fractions::showDenom()
{

}
int Fractions::showNum()
{

}
Fractions Fractions::copyFrac(Fractions)
{

}
void Fractions::clearFrac()
{

}

Fractions operator*(Fractions , Fractions )
{

}
Fractions operator/(Fractions , Fractions )
{

}
Fractions operator+(Fractions , Fractions )
{

}
Fractions operator-(Fractions , Fractions )
{

}
bool operator<(Fractions, Fractions)
{

}
bool operator<=(Fractions, Fractions)
{

}
bool operator>(Fractions, Fractions)
{

}
bool operator>=(Fractions, Fractions)
{

}
ostream& operator<<(ostream& , Fractions& )
{
	
}
