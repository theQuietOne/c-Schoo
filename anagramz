#include<conio.h>
#include<iostream>
#include<string>
#include<fstream>
#include<vector>
#include<algorithm>
using namespace std;
string alph(string);
struct node
{
	string strSto;
	string alphado;
	node* next;
};
void main()
{
	
	char ministorage;
	string storage = "";
	node *firstest, *lastest, *newest = new node;
	firstest = lastest = newest;
	newest->next = NULL;
	ifstream in;
	in.open("anaDict.txt");
	//create end of list marker
	newest = new node;
	firstest = newest;
	lastest = newest;
	lastest->alphado = '~';
	lastest->strSto = '~';
	lastest->next = NULL;
	//parse strings for non-letter characters, sort into linked list
	while (!in.eof())
	{
		ministorage = in.get();
		if ((ministorage >= 65 && ministorage <= 90) || (ministorage >= 97 && ministorage <= 122))
			storage += tolower(ministorage);
		else if (ministorage == '\n'&&storage.length() > 0)
		{
			newest = new node;
			newest->strSto = storage;
			newest->alphado = alph(storage);
			storage = "";
			if (firstest->alphado > newest->alphado)
			{
				newest->next = firstest;
				firstest = newest;
			}
			else
			{
				node *stor = firstest;
				bool flag = true;
				while (stor->next != NULL && flag == true)
				{
					if (stor->next->alphado > newest->alphado)
					{
						newest->next = stor->next;
						stor->next = newest;
						flag = false;
					}
					stor = stor->next;
				}
			}
		}
	}
	//final input
	if (storage != "")
	{
		newest = new node;
		newest->strSto = storage;
		newest->alphado = alph(storage);
		if (firstest->alphado > newest->alphado)
		{
			newest->next = firstest;
			firstest = newest;
		}
		else
		{
			node *stor = firstest;
			bool flag = true;
			while (stor->next != NULL && flag == true)
			{
				if (stor->next->alphado > newest->alphado)
				{
					newest->next = stor->next;
					stor->next = newest;
					flag = false;
				}
				stor = stor->next;
			}
		}
	} 
	//count number of anagrams
	node *stor = firstest;
	int winner = 1, temporary = 1;
	string winStr = stor->strSto, tempStr = "";
	while (stor->next != NULL)
	{
		if (stor->alphado == stor->next->alphado)
			temporary++;
		else if (temporary > winner)
		{
			winner = temporary;
			winStr = tempStr;
			temporary = 1;
			tempStr = stor->next->strSto;
		}
		else
		{
			temporary = 1;
			tempStr = stor->next->strSto;
		}
		stor=stor->next;
	}
	cout << winner<< endl;
	cout << winStr;
	in.close();
	_getch();
}
string alph(string input)					//organize a string into alphabetical characters (potato->aooptt)
{
	vector<char> aiauh;
	for (int count = 0; count < input.length(); count++)
		aiauh.push_back(input[count]);
	sort(aiauh.begin(), aiauh.end());
	for (int count = 0; count < input.length(); count++)
		input[count] = aiauh[count];
	/*bool flag=true;
	while (flag == true)
	{
		flag = false;
		for (int count = 0; count < input.length()-1; count++)
		{
			if (input[count] > input[count + 1])
			{
				swap(input[count], input[count + 1]);
				flag = true;
			}
		}
	}*/
	return input;
}

