#include<conio.h>
#include<iostream>
#include<string>
#include<fstream>
using namespace std;
struct node
{
	string strSto;
	string alphado;
	node* next;
};
void main()
{
	char ministorage;
	string storage = "";
	node *firstest, *lastest, *newest = new node;
	firstest = lastest = newest;
	newest->next = NULL;
	ifstream in;
	in.open("anaDict.txt");
	//enter file into linked list, parse for non-letter characters
	while (!in.eof())
	{
		ministorage = in.get();
		if ((ministorage >= 65 && ministorage <= 90) || (ministorage >= 97 && ministorage <= 122))
			storage += tolower(ministorage);
		else if (ministorage == '\n'&&storage.length() > 0)
		{
			lastest->strSto = storage;
			newest = new node;
			lastest->next = newest;
			lastest = newest;
			lastest->next = NULL;
			storage = "";
		}
	}
	//input final word
	if (storage.length() > 0)
	{
		lastest->strSto = storage;
		newest = new node;
		lastest->next = newest;
		lastest = newest;
		lastest->next = NULL;
		storage = "";
	}
	//one additional node as an end-of-list marker
	newest = new node;
	lastest->next = newest;
	lastest = newest;
	lastest->next = NULL;
	storage = "";
	//place letters to be sorted
	node *stor = firstest;
	while (stor->next != NULL)
	{
		stor->alphado = stor->strSto;
		stor = stor->next;
	}
	stor = firstest;
	//sort letters into an alphabetical sequence
	bool sorted = false;
	while (stor->next != NULL)
	{
		sorted = false;
		if (stor->alphado.length() > 1)
			while (sorted == false)
			{
				sorted = true;
				for (int count = 0; count < stor->alphado.length() - 1; count++)
				{
					if (stor->alphado[count] > stor->alphado[count + 1])
					{
						swap(stor->alphado[count], stor->alphado[count + 1]);
						sorted = false;
					}
				}
			}
		stor = stor->next;
	}
	//sort by sequence
	sorted = false;
	while (sorted == false)
	{
		stor = firstest;
		sorted = true;
		while (stor->next != NULL)
		{
			if (stor->alphado > stor->next->alphado&&stor->next->alphado != "")
			{
				storage = stor->alphado;
				stor->alphado = stor->next->alphado;
				stor->next->alphado = storage;
				storage = stor->strSto;
				stor->strSto = stor->next->strSto;
				stor->next->strSto = storage;
				sorted = false;
			}
			stor = stor->next;
		}
	}
	//count number of anagrams
	stor = firstest;
	int winner = 1, temporary = 1;
	string winStr = stor->strSto, tempStr = "";
	while (stor->next != NULL)
	{
		if (stor->alphado == stor->next->alphado)
			temporary++;
		else if (temporary > winner)
		{
			winner = temporary;
			winStr = tempStr;
			temporary = 1;
			tempStr = stor->next->strSto;
		}
		else
		{
			temporary = 1;
			tempStr = stor->next->strSto;
		}
		stor=stor->next;
	}
	cout << winner<< endl;
	cout << winStr;
	in.close();
	_getch();
}
